// Code generated by MockGen. DO NOT EDIT.
// Source: ../internal/service/article.go
//
// Generated by this command:
//
//	mockgen -source=../internal/service/article.go -package=svcmocks -destination=../internal/service/mocks/article.mock.go
//

// Package svcmocks is a generated GoMock package.
package svcmocks

import (
	context "context"
	reflect "reflect"

	domain "github.com/LEILEI0628/GoWeb/internal/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockArticleServiceInterface is a mock of ArticleServiceInterface interface.
type MockArticleServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockArticleServiceInterfaceMockRecorder
	isgomock struct{}
}

// MockArticleServiceInterfaceMockRecorder is the mock recorder for MockArticleServiceInterface.
type MockArticleServiceInterfaceMockRecorder struct {
	mock *MockArticleServiceInterface
}

// NewMockArticleServiceInterface creates a new mock instance.
func NewMockArticleServiceInterface(ctrl *gomock.Controller) *MockArticleServiceInterface {
	mock := &MockArticleServiceInterface{ctrl: ctrl}
	mock.recorder = &MockArticleServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockArticleServiceInterface) EXPECT() *MockArticleServiceInterfaceMockRecorder {
	return m.recorder
}

// Publish mocks base method.
func (m *MockArticleServiceInterface) Publish(ctx context.Context, art domain.Article) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Publish", ctx, art)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Publish indicates an expected call of Publish.
func (mr *MockArticleServiceInterfaceMockRecorder) Publish(ctx, art any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockArticleServiceInterface)(nil).Publish), ctx, art)
}

// Save mocks base method.
func (m *MockArticleServiceInterface) Save(ctx context.Context, article domain.Article) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, article)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Save indicates an expected call of Save.
func (mr *MockArticleServiceInterfaceMockRecorder) Save(ctx, article any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockArticleServiceInterface)(nil).Save), ctx, article)
}
