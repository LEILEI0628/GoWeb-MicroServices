// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	repository3 "github.com/LEILEI0628/GoWeb/interactive/repository"
	cache2 "github.com/LEILEI0628/GoWeb/interactive/repository/cache"
	dao3 "github.com/LEILEI0628/GoWeb/interactive/repository/dao"
	service2 "github.com/LEILEI0628/GoWeb/interactive/service"
	"github.com/LEILEI0628/GoWeb/internal/repository"
	repository2 "github.com/LEILEI0628/GoWeb/internal/repository/article"
	"github.com/LEILEI0628/GoWeb/internal/repository/cache"
	"github.com/LEILEI0628/GoWeb/internal/repository/dao"
	dao2 "github.com/LEILEI0628/GoWeb/internal/repository/dao/article"
	"github.com/LEILEI0628/GoWeb/internal/service"
	"github.com/LEILEI0628/GoWeb/internal/web"
	"github.com/LEILEI0628/GoWeb/internal/web/handler"
	"github.com/LEILEI0628/GoWeb/internal/web/router"
	"github.com/LEILEI0628/GoWeb/ioc"
	"github.com/gin-gonic/gin"
	"github.com/google/wire"
)

import (
	_ "github.com/spf13/viper/remote"
)

// Injectors from wire.go:

func InitWebServer() *gin.Engine {
	cmdable := ioc.InitRedis()
	limiter := ioc.InitLimiter(cmdable)
	logger := ioc.InitGlobalLogger()
	v := ioc.InitMiddleware(limiter, logger)
	db := ioc.InitDB(logger)
	userDAO := dao.NewUserDAO(db)
	userCache := cache.NewUserCache(cmdable)
	userRepository := repository.NewUserRepository(userDAO, userCache)
	userServiceInterface := ioc.InitUserService(userRepository)
	userHandler := handler.NewUserHandler(userServiceInterface)
	userRouters := router.NewUserRouters(userHandler)
	articleDAO := dao2.NewGORMArticleDAO(db)
	articleRepository := repository2.NewArticleRepository(articleDAO)
	articleServiceInterface := service.NewArticleService(articleRepository)
	interactiveDAO := dao3.NewGORMInteractiveDAO(db)
	interactiveCache := cache2.NewRedisInteractiveCache(cmdable)
	interactiveRepositoryInterface := repository3.NewCachedInteractiveRepository(interactiveDAO, interactiveCache, logger)
	interactiveServiceInterface := service2.NewInteractiveService(interactiveRepositoryInterface, logger)
	articleHandler := handler.NewArticleHandler(articleServiceInterface, interactiveServiceInterface, logger)
	articleRouters := router.NewArticleRouters(articleHandler)
	registerRouters := web.NewRegisterRouters(userRouters, articleRouters)
	engine := ioc.InitGin(v, registerRouters)
	return engine
}

// wire.go:

var interactiveSvcProvider = wire.NewSet(service2.NewInteractiveService, repository3.NewCachedInteractiveRepository, dao3.NewGORMInteractiveDAO, cache2.NewRedisInteractiveCache)

var databaseSelect = wire.NewSet(ioc.InitDB)

type DatabaseType string

var MySQL DatabaseType = "mysql"
