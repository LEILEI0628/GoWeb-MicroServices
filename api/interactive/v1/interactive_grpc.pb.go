// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: interactive/v1/interactive.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Interactive_CreateInteractive_FullMethodName = "/api.interactive.v1.Interactive/CreateInteractive"
	Interactive_UpdateInteractive_FullMethodName = "/api.interactive.v1.Interactive/UpdateInteractive"
	Interactive_DeleteInteractive_FullMethodName = "/api.interactive.v1.Interactive/DeleteInteractive"
	Interactive_GetInteractive_FullMethodName    = "/api.interactive.v1.Interactive/GetInteractive"
	Interactive_ListInteractive_FullMethodName   = "/api.interactive.v1.Interactive/ListInteractive"
)

// InteractiveClient is the client API for Interactive service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InteractiveClient interface {
	CreateInteractive(ctx context.Context, in *CreateInteractiveRequest, opts ...grpc.CallOption) (*CreateInteractiveReply, error)
	UpdateInteractive(ctx context.Context, in *UpdateInteractiveRequest, opts ...grpc.CallOption) (*UpdateInteractiveReply, error)
	DeleteInteractive(ctx context.Context, in *DeleteInteractiveRequest, opts ...grpc.CallOption) (*DeleteInteractiveReply, error)
	GetInteractive(ctx context.Context, in *GetInteractiveRequest, opts ...grpc.CallOption) (*GetInteractiveReply, error)
	ListInteractive(ctx context.Context, in *ListInteractiveRequest, opts ...grpc.CallOption) (*ListInteractiveReply, error)
}

type interactiveClient struct {
	cc grpc.ClientConnInterface
}

func NewInteractiveClient(cc grpc.ClientConnInterface) InteractiveClient {
	return &interactiveClient{cc}
}

func (c *interactiveClient) CreateInteractive(ctx context.Context, in *CreateInteractiveRequest, opts ...grpc.CallOption) (*CreateInteractiveReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateInteractiveReply)
	err := c.cc.Invoke(ctx, Interactive_CreateInteractive_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interactiveClient) UpdateInteractive(ctx context.Context, in *UpdateInteractiveRequest, opts ...grpc.CallOption) (*UpdateInteractiveReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateInteractiveReply)
	err := c.cc.Invoke(ctx, Interactive_UpdateInteractive_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interactiveClient) DeleteInteractive(ctx context.Context, in *DeleteInteractiveRequest, opts ...grpc.CallOption) (*DeleteInteractiveReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteInteractiveReply)
	err := c.cc.Invoke(ctx, Interactive_DeleteInteractive_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interactiveClient) GetInteractive(ctx context.Context, in *GetInteractiveRequest, opts ...grpc.CallOption) (*GetInteractiveReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetInteractiveReply)
	err := c.cc.Invoke(ctx, Interactive_GetInteractive_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interactiveClient) ListInteractive(ctx context.Context, in *ListInteractiveRequest, opts ...grpc.CallOption) (*ListInteractiveReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListInteractiveReply)
	err := c.cc.Invoke(ctx, Interactive_ListInteractive_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InteractiveServer is the server API for Interactive service.
// All implementations must embed UnimplementedInteractiveServer
// for forward compatibility.
type InteractiveServer interface {
	CreateInteractive(context.Context, *CreateInteractiveRequest) (*CreateInteractiveReply, error)
	UpdateInteractive(context.Context, *UpdateInteractiveRequest) (*UpdateInteractiveReply, error)
	DeleteInteractive(context.Context, *DeleteInteractiveRequest) (*DeleteInteractiveReply, error)
	GetInteractive(context.Context, *GetInteractiveRequest) (*GetInteractiveReply, error)
	ListInteractive(context.Context, *ListInteractiveRequest) (*ListInteractiveReply, error)
	mustEmbedUnimplementedInteractiveServer()
}

// UnimplementedInteractiveServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedInteractiveServer struct{}

func (UnimplementedInteractiveServer) CreateInteractive(context.Context, *CreateInteractiveRequest) (*CreateInteractiveReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateInteractive not implemented")
}
func (UnimplementedInteractiveServer) UpdateInteractive(context.Context, *UpdateInteractiveRequest) (*UpdateInteractiveReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateInteractive not implemented")
}
func (UnimplementedInteractiveServer) DeleteInteractive(context.Context, *DeleteInteractiveRequest) (*DeleteInteractiveReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteInteractive not implemented")
}
func (UnimplementedInteractiveServer) GetInteractive(context.Context, *GetInteractiveRequest) (*GetInteractiveReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInteractive not implemented")
}
func (UnimplementedInteractiveServer) ListInteractive(context.Context, *ListInteractiveRequest) (*ListInteractiveReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListInteractive not implemented")
}
func (UnimplementedInteractiveServer) mustEmbedUnimplementedInteractiveServer() {}
func (UnimplementedInteractiveServer) testEmbeddedByValue()                     {}

// UnsafeInteractiveServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InteractiveServer will
// result in compilation errors.
type UnsafeInteractiveServer interface {
	mustEmbedUnimplementedInteractiveServer()
}

func RegisterInteractiveServer(s grpc.ServiceRegistrar, srv InteractiveServer) {
	// If the following call pancis, it indicates UnimplementedInteractiveServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Interactive_ServiceDesc, srv)
}

func _Interactive_CreateInteractive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateInteractiveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InteractiveServer).CreateInteractive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Interactive_CreateInteractive_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InteractiveServer).CreateInteractive(ctx, req.(*CreateInteractiveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Interactive_UpdateInteractive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateInteractiveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InteractiveServer).UpdateInteractive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Interactive_UpdateInteractive_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InteractiveServer).UpdateInteractive(ctx, req.(*UpdateInteractiveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Interactive_DeleteInteractive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteInteractiveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InteractiveServer).DeleteInteractive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Interactive_DeleteInteractive_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InteractiveServer).DeleteInteractive(ctx, req.(*DeleteInteractiveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Interactive_GetInteractive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInteractiveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InteractiveServer).GetInteractive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Interactive_GetInteractive_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InteractiveServer).GetInteractive(ctx, req.(*GetInteractiveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Interactive_ListInteractive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListInteractiveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InteractiveServer).ListInteractive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Interactive_ListInteractive_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InteractiveServer).ListInteractive(ctx, req.(*ListInteractiveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Interactive_ServiceDesc is the grpc.ServiceDesc for Interactive service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Interactive_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.interactive.v1.Interactive",
	HandlerType: (*InteractiveServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateInteractive",
			Handler:    _Interactive_CreateInteractive_Handler,
		},
		{
			MethodName: "UpdateInteractive",
			Handler:    _Interactive_UpdateInteractive_Handler,
		},
		{
			MethodName: "DeleteInteractive",
			Handler:    _Interactive_DeleteInteractive_Handler,
		},
		{
			MethodName: "GetInteractive",
			Handler:    _Interactive_GetInteractive_Handler,
		},
		{
			MethodName: "ListInteractive",
			Handler:    _Interactive_ListInteractive_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "interactive/v1/interactive.proto",
}
