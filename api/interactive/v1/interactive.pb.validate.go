// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: interactive/v1/interactive.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateInteractiveRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateInteractiveRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateInteractiveRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateInteractiveRequestMultiError, or nil if none found.
func (m *CreateInteractiveRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateInteractiveRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateInteractiveRequestMultiError(errors)
	}

	return nil
}

// CreateInteractiveRequestMultiError is an error wrapping multiple validation
// errors returned by CreateInteractiveRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateInteractiveRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateInteractiveRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateInteractiveRequestMultiError) AllErrors() []error { return m }

// CreateInteractiveRequestValidationError is the validation error returned by
// CreateInteractiveRequest.Validate if the designated constraints aren't met.
type CreateInteractiveRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateInteractiveRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateInteractiveRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateInteractiveRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateInteractiveRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateInteractiveRequestValidationError) ErrorName() string {
	return "CreateInteractiveRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateInteractiveRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateInteractiveRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateInteractiveRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateInteractiveRequestValidationError{}

// Validate checks the field values on CreateInteractiveReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateInteractiveReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateInteractiveReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateInteractiveReplyMultiError, or nil if none found.
func (m *CreateInteractiveReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateInteractiveReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateInteractiveReplyMultiError(errors)
	}

	return nil
}

// CreateInteractiveReplyMultiError is an error wrapping multiple validation
// errors returned by CreateInteractiveReply.ValidateAll() if the designated
// constraints aren't met.
type CreateInteractiveReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateInteractiveReplyMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateInteractiveReplyMultiError) AllErrors() []error { return m }

// CreateInteractiveReplyValidationError is the validation error returned by
// CreateInteractiveReply.Validate if the designated constraints aren't met.
type CreateInteractiveReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateInteractiveReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateInteractiveReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateInteractiveReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateInteractiveReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateInteractiveReplyValidationError) ErrorName() string {
	return "CreateInteractiveReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateInteractiveReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateInteractiveReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateInteractiveReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateInteractiveReplyValidationError{}

// Validate checks the field values on UpdateInteractiveRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateInteractiveRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateInteractiveRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateInteractiveRequestMultiError, or nil if none found.
func (m *UpdateInteractiveRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateInteractiveRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateInteractiveRequestMultiError(errors)
	}

	return nil
}

// UpdateInteractiveRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateInteractiveRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateInteractiveRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateInteractiveRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateInteractiveRequestMultiError) AllErrors() []error { return m }

// UpdateInteractiveRequestValidationError is the validation error returned by
// UpdateInteractiveRequest.Validate if the designated constraints aren't met.
type UpdateInteractiveRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateInteractiveRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateInteractiveRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateInteractiveRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateInteractiveRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateInteractiveRequestValidationError) ErrorName() string {
	return "UpdateInteractiveRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateInteractiveRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateInteractiveRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateInteractiveRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateInteractiveRequestValidationError{}

// Validate checks the field values on UpdateInteractiveReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateInteractiveReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateInteractiveReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateInteractiveReplyMultiError, or nil if none found.
func (m *UpdateInteractiveReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateInteractiveReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateInteractiveReplyMultiError(errors)
	}

	return nil
}

// UpdateInteractiveReplyMultiError is an error wrapping multiple validation
// errors returned by UpdateInteractiveReply.ValidateAll() if the designated
// constraints aren't met.
type UpdateInteractiveReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateInteractiveReplyMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateInteractiveReplyMultiError) AllErrors() []error { return m }

// UpdateInteractiveReplyValidationError is the validation error returned by
// UpdateInteractiveReply.Validate if the designated constraints aren't met.
type UpdateInteractiveReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateInteractiveReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateInteractiveReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateInteractiveReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateInteractiveReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateInteractiveReplyValidationError) ErrorName() string {
	return "UpdateInteractiveReplyValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateInteractiveReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateInteractiveReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateInteractiveReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateInteractiveReplyValidationError{}

// Validate checks the field values on DeleteInteractiveRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteInteractiveRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteInteractiveRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteInteractiveRequestMultiError, or nil if none found.
func (m *DeleteInteractiveRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteInteractiveRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteInteractiveRequestMultiError(errors)
	}

	return nil
}

// DeleteInteractiveRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteInteractiveRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteInteractiveRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteInteractiveRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteInteractiveRequestMultiError) AllErrors() []error { return m }

// DeleteInteractiveRequestValidationError is the validation error returned by
// DeleteInteractiveRequest.Validate if the designated constraints aren't met.
type DeleteInteractiveRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteInteractiveRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteInteractiveRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteInteractiveRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteInteractiveRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteInteractiveRequestValidationError) ErrorName() string {
	return "DeleteInteractiveRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteInteractiveRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteInteractiveRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteInteractiveRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteInteractiveRequestValidationError{}

// Validate checks the field values on DeleteInteractiveReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteInteractiveReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteInteractiveReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteInteractiveReplyMultiError, or nil if none found.
func (m *DeleteInteractiveReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteInteractiveReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteInteractiveReplyMultiError(errors)
	}

	return nil
}

// DeleteInteractiveReplyMultiError is an error wrapping multiple validation
// errors returned by DeleteInteractiveReply.ValidateAll() if the designated
// constraints aren't met.
type DeleteInteractiveReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteInteractiveReplyMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteInteractiveReplyMultiError) AllErrors() []error { return m }

// DeleteInteractiveReplyValidationError is the validation error returned by
// DeleteInteractiveReply.Validate if the designated constraints aren't met.
type DeleteInteractiveReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteInteractiveReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteInteractiveReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteInteractiveReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteInteractiveReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteInteractiveReplyValidationError) ErrorName() string {
	return "DeleteInteractiveReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteInteractiveReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteInteractiveReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteInteractiveReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteInteractiveReplyValidationError{}

// Validate checks the field values on GetInteractiveRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetInteractiveRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetInteractiveRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetInteractiveRequestMultiError, or nil if none found.
func (m *GetInteractiveRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetInteractiveRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetInteractiveRequestMultiError(errors)
	}

	return nil
}

// GetInteractiveRequestMultiError is an error wrapping multiple validation
// errors returned by GetInteractiveRequest.ValidateAll() if the designated
// constraints aren't met.
type GetInteractiveRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetInteractiveRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetInteractiveRequestMultiError) AllErrors() []error { return m }

// GetInteractiveRequestValidationError is the validation error returned by
// GetInteractiveRequest.Validate if the designated constraints aren't met.
type GetInteractiveRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetInteractiveRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetInteractiveRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetInteractiveRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetInteractiveRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetInteractiveRequestValidationError) ErrorName() string {
	return "GetInteractiveRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetInteractiveRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetInteractiveRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetInteractiveRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetInteractiveRequestValidationError{}

// Validate checks the field values on GetInteractiveReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetInteractiveReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetInteractiveReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetInteractiveReplyMultiError, or nil if none found.
func (m *GetInteractiveReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetInteractiveReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetInteractiveReplyMultiError(errors)
	}

	return nil
}

// GetInteractiveReplyMultiError is an error wrapping multiple validation
// errors returned by GetInteractiveReply.ValidateAll() if the designated
// constraints aren't met.
type GetInteractiveReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetInteractiveReplyMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetInteractiveReplyMultiError) AllErrors() []error { return m }

// GetInteractiveReplyValidationError is the validation error returned by
// GetInteractiveReply.Validate if the designated constraints aren't met.
type GetInteractiveReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetInteractiveReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetInteractiveReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetInteractiveReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetInteractiveReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetInteractiveReplyValidationError) ErrorName() string {
	return "GetInteractiveReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetInteractiveReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetInteractiveReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetInteractiveReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetInteractiveReplyValidationError{}

// Validate checks the field values on ListInteractiveRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListInteractiveRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListInteractiveRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListInteractiveRequestMultiError, or nil if none found.
func (m *ListInteractiveRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListInteractiveRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListInteractiveRequestMultiError(errors)
	}

	return nil
}

// ListInteractiveRequestMultiError is an error wrapping multiple validation
// errors returned by ListInteractiveRequest.ValidateAll() if the designated
// constraints aren't met.
type ListInteractiveRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListInteractiveRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListInteractiveRequestMultiError) AllErrors() []error { return m }

// ListInteractiveRequestValidationError is the validation error returned by
// ListInteractiveRequest.Validate if the designated constraints aren't met.
type ListInteractiveRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListInteractiveRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListInteractiveRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListInteractiveRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListInteractiveRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListInteractiveRequestValidationError) ErrorName() string {
	return "ListInteractiveRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListInteractiveRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListInteractiveRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListInteractiveRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListInteractiveRequestValidationError{}

// Validate checks the field values on ListInteractiveReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListInteractiveReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListInteractiveReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListInteractiveReplyMultiError, or nil if none found.
func (m *ListInteractiveReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListInteractiveReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListInteractiveReplyMultiError(errors)
	}

	return nil
}

// ListInteractiveReplyMultiError is an error wrapping multiple validation
// errors returned by ListInteractiveReply.ValidateAll() if the designated
// constraints aren't met.
type ListInteractiveReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListInteractiveReplyMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListInteractiveReplyMultiError) AllErrors() []error { return m }

// ListInteractiveReplyValidationError is the validation error returned by
// ListInteractiveReply.Validate if the designated constraints aren't met.
type ListInteractiveReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListInteractiveReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListInteractiveReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListInteractiveReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListInteractiveReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListInteractiveReplyValidationError) ErrorName() string {
	return "ListInteractiveReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ListInteractiveReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListInteractiveReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListInteractiveReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListInteractiveReplyValidationError{}
