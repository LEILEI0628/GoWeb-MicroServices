// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: interactive/v1/interactive.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GetByIdsRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetByIdsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetByIdsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetByIdsRequestMultiError, or nil if none found.
func (m *GetByIdsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetByIdsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Biz

	if len(errors) > 0 {
		return GetByIdsRequestMultiError(errors)
	}

	return nil
}

// GetByIdsRequestMultiError is an error wrapping multiple validation errors
// returned by GetByIdsRequest.ValidateAll() if the designated constraints
// aren't met.
type GetByIdsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetByIdsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetByIdsRequestMultiError) AllErrors() []error { return m }

// GetByIdsRequestValidationError is the validation error returned by
// GetByIdsRequest.Validate if the designated constraints aren't met.
type GetByIdsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetByIdsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetByIdsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetByIdsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetByIdsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetByIdsRequestValidationError) ErrorName() string { return "GetByIdsRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetByIdsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetByIdsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetByIdsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetByIdsRequestValidationError{}

// Validate checks the field values on GetByIdsResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetByIdsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetByIdsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetByIdsResponseMultiError, or nil if none found.
func (m *GetByIdsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetByIdsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	{
		sorted_keys := make([]int64, len(m.GetIntrs()))
		i := 0
		for key := range m.GetIntrs() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetIntrs()[key]
			_ = val

			// no validation rules for Intrs[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, GetByIdsResponseValidationError{
							field:  fmt.Sprintf("Intrs[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, GetByIdsResponseValidationError{
							field:  fmt.Sprintf("Intrs[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return GetByIdsResponseValidationError{
						field:  fmt.Sprintf("Intrs[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if len(errors) > 0 {
		return GetByIdsResponseMultiError(errors)
	}

	return nil
}

// GetByIdsResponseMultiError is an error wrapping multiple validation errors
// returned by GetByIdsResponse.ValidateAll() if the designated constraints
// aren't met.
type GetByIdsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetByIdsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetByIdsResponseMultiError) AllErrors() []error { return m }

// GetByIdsResponseValidationError is the validation error returned by
// GetByIdsResponse.Validate if the designated constraints aren't met.
type GetByIdsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetByIdsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetByIdsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetByIdsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetByIdsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetByIdsResponseValidationError) ErrorName() string { return "GetByIdsResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetByIdsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetByIdsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetByIdsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetByIdsResponseValidationError{}

// Validate checks the field values on GetRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetRequestMultiError, or
// nil if none found.
func (m *GetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Biz

	// no validation rules for BizId

	// no validation rules for Uid

	if len(errors) > 0 {
		return GetRequestMultiError(errors)
	}

	return nil
}

// GetRequestMultiError is an error wrapping multiple validation errors
// returned by GetRequest.ValidateAll() if the designated constraints aren't met.
type GetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetRequestMultiError) AllErrors() []error { return m }

// GetRequestValidationError is the validation error returned by
// GetRequest.Validate if the designated constraints aren't met.
type GetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRequestValidationError) ErrorName() string { return "GetRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRequestValidationError{}

// Validate checks the field values on GetResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetResponseMultiError, or
// nil if none found.
func (m *GetResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetIntr()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetResponseValidationError{
					field:  "Intr",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetResponseValidationError{
					field:  "Intr",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetIntr()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetResponseValidationError{
				field:  "Intr",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetResponseMultiError(errors)
	}

	return nil
}

// GetResponseMultiError is an error wrapping multiple validation errors
// returned by GetResponse.ValidateAll() if the designated constraints aren't met.
type GetResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetResponseMultiError) AllErrors() []error { return m }

// GetResponseValidationError is the validation error returned by
// GetResponse.Validate if the designated constraints aren't met.
type GetResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetResponseValidationError) ErrorName() string { return "GetResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetResponseValidationError{}

// Validate checks the field values on Interactive with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Interactive) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Interactive with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in InteractiveMultiError, or
// nil if none found.
func (m *Interactive) ValidateAll() error {
	return m.validate(true)
}

func (m *Interactive) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Biz

	// no validation rules for BizId

	// no validation rules for ReadCnt

	// no validation rules for LikeCnt

	// no validation rules for CollectCnt

	// no validation rules for Liked

	// no validation rules for Collected

	if len(errors) > 0 {
		return InteractiveMultiError(errors)
	}

	return nil
}

// InteractiveMultiError is an error wrapping multiple validation errors
// returned by Interactive.ValidateAll() if the designated constraints aren't met.
type InteractiveMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InteractiveMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InteractiveMultiError) AllErrors() []error { return m }

// InteractiveValidationError is the validation error returned by
// Interactive.Validate if the designated constraints aren't met.
type InteractiveValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InteractiveValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InteractiveValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InteractiveValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InteractiveValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InteractiveValidationError) ErrorName() string { return "InteractiveValidationError" }

// Error satisfies the builtin error interface
func (e InteractiveValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInteractive.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InteractiveValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InteractiveValidationError{}

// Validate checks the field values on CollectRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CollectRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CollectRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CollectRequestMultiError,
// or nil if none found.
func (m *CollectRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CollectRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Biz

	// no validation rules for BizId

	// no validation rules for Uid

	// no validation rules for Cid

	if len(errors) > 0 {
		return CollectRequestMultiError(errors)
	}

	return nil
}

// CollectRequestMultiError is an error wrapping multiple validation errors
// returned by CollectRequest.ValidateAll() if the designated constraints
// aren't met.
type CollectRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CollectRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CollectRequestMultiError) AllErrors() []error { return m }

// CollectRequestValidationError is the validation error returned by
// CollectRequest.Validate if the designated constraints aren't met.
type CollectRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CollectRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CollectRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CollectRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CollectRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CollectRequestValidationError) ErrorName() string { return "CollectRequestValidationError" }

// Error satisfies the builtin error interface
func (e CollectRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCollectRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CollectRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CollectRequestValidationError{}

// Validate checks the field values on CollectResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CollectResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CollectResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CollectResponseMultiError, or nil if none found.
func (m *CollectResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CollectResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CollectResponseMultiError(errors)
	}

	return nil
}

// CollectResponseMultiError is an error wrapping multiple validation errors
// returned by CollectResponse.ValidateAll() if the designated constraints
// aren't met.
type CollectResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CollectResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CollectResponseMultiError) AllErrors() []error { return m }

// CollectResponseValidationError is the validation error returned by
// CollectResponse.Validate if the designated constraints aren't met.
type CollectResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CollectResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CollectResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CollectResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CollectResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CollectResponseValidationError) ErrorName() string { return "CollectResponseValidationError" }

// Error satisfies the builtin error interface
func (e CollectResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCollectResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CollectResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CollectResponseValidationError{}

// Validate checks the field values on CancelLikeRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CancelLikeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CancelLikeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CancelLikeRequestMultiError, or nil if none found.
func (m *CancelLikeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CancelLikeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Biz

	// no validation rules for BizId

	// no validation rules for Uid

	if len(errors) > 0 {
		return CancelLikeRequestMultiError(errors)
	}

	return nil
}

// CancelLikeRequestMultiError is an error wrapping multiple validation errors
// returned by CancelLikeRequest.ValidateAll() if the designated constraints
// aren't met.
type CancelLikeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CancelLikeRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CancelLikeRequestMultiError) AllErrors() []error { return m }

// CancelLikeRequestValidationError is the validation error returned by
// CancelLikeRequest.Validate if the designated constraints aren't met.
type CancelLikeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CancelLikeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CancelLikeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CancelLikeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CancelLikeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CancelLikeRequestValidationError) ErrorName() string {
	return "CancelLikeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CancelLikeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCancelLikeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CancelLikeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CancelLikeRequestValidationError{}

// Validate checks the field values on CancelLikeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CancelLikeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CancelLikeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CancelLikeResponseMultiError, or nil if none found.
func (m *CancelLikeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CancelLikeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CancelLikeResponseMultiError(errors)
	}

	return nil
}

// CancelLikeResponseMultiError is an error wrapping multiple validation errors
// returned by CancelLikeResponse.ValidateAll() if the designated constraints
// aren't met.
type CancelLikeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CancelLikeResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CancelLikeResponseMultiError) AllErrors() []error { return m }

// CancelLikeResponseValidationError is the validation error returned by
// CancelLikeResponse.Validate if the designated constraints aren't met.
type CancelLikeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CancelLikeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CancelLikeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CancelLikeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CancelLikeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CancelLikeResponseValidationError) ErrorName() string {
	return "CancelLikeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CancelLikeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCancelLikeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CancelLikeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CancelLikeResponseValidationError{}

// Validate checks the field values on LikeRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LikeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LikeRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LikeRequestMultiError, or
// nil if none found.
func (m *LikeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *LikeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Biz

	// no validation rules for BizId

	// no validation rules for Uid

	if len(errors) > 0 {
		return LikeRequestMultiError(errors)
	}

	return nil
}

// LikeRequestMultiError is an error wrapping multiple validation errors
// returned by LikeRequest.ValidateAll() if the designated constraints aren't met.
type LikeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LikeRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LikeRequestMultiError) AllErrors() []error { return m }

// LikeRequestValidationError is the validation error returned by
// LikeRequest.Validate if the designated constraints aren't met.
type LikeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LikeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LikeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LikeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LikeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LikeRequestValidationError) ErrorName() string { return "LikeRequestValidationError" }

// Error satisfies the builtin error interface
func (e LikeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLikeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LikeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LikeRequestValidationError{}

// Validate checks the field values on LikeResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LikeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LikeResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LikeResponseMultiError, or
// nil if none found.
func (m *LikeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *LikeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return LikeResponseMultiError(errors)
	}

	return nil
}

// LikeResponseMultiError is an error wrapping multiple validation errors
// returned by LikeResponse.ValidateAll() if the designated constraints aren't met.
type LikeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LikeResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LikeResponseMultiError) AllErrors() []error { return m }

// LikeResponseValidationError is the validation error returned by
// LikeResponse.Validate if the designated constraints aren't met.
type LikeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LikeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LikeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LikeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LikeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LikeResponseValidationError) ErrorName() string { return "LikeResponseValidationError" }

// Error satisfies the builtin error interface
func (e LikeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLikeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LikeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LikeResponseValidationError{}

// Validate checks the field values on IncrReadCntRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IncrReadCntRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IncrReadCntRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IncrReadCntRequestMultiError, or nil if none found.
func (m *IncrReadCntRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *IncrReadCntRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Biz

	// no validation rules for BizId

	if len(errors) > 0 {
		return IncrReadCntRequestMultiError(errors)
	}

	return nil
}

// IncrReadCntRequestMultiError is an error wrapping multiple validation errors
// returned by IncrReadCntRequest.ValidateAll() if the designated constraints
// aren't met.
type IncrReadCntRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IncrReadCntRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IncrReadCntRequestMultiError) AllErrors() []error { return m }

// IncrReadCntRequestValidationError is the validation error returned by
// IncrReadCntRequest.Validate if the designated constraints aren't met.
type IncrReadCntRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IncrReadCntRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IncrReadCntRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IncrReadCntRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IncrReadCntRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IncrReadCntRequestValidationError) ErrorName() string {
	return "IncrReadCntRequestValidationError"
}

// Error satisfies the builtin error interface
func (e IncrReadCntRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIncrReadCntRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IncrReadCntRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IncrReadCntRequestValidationError{}

// Validate checks the field values on IncrReadCntResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IncrReadCntResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IncrReadCntResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IncrReadCntResponseMultiError, or nil if none found.
func (m *IncrReadCntResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *IncrReadCntResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return IncrReadCntResponseMultiError(errors)
	}

	return nil
}

// IncrReadCntResponseMultiError is an error wrapping multiple validation
// errors returned by IncrReadCntResponse.ValidateAll() if the designated
// constraints aren't met.
type IncrReadCntResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IncrReadCntResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IncrReadCntResponseMultiError) AllErrors() []error { return m }

// IncrReadCntResponseValidationError is the validation error returned by
// IncrReadCntResponse.Validate if the designated constraints aren't met.
type IncrReadCntResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IncrReadCntResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IncrReadCntResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IncrReadCntResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IncrReadCntResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IncrReadCntResponseValidationError) ErrorName() string {
	return "IncrReadCntResponseValidationError"
}

// Error satisfies the builtin error interface
func (e IncrReadCntResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIncrReadCntResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IncrReadCntResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IncrReadCntResponseValidationError{}
